image: golang:latest

variables:
  COMMAND: docuscope-rules
  DOCKER_TLS_CERTDIR: "/certs"
  REF_CONTAINER: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}
  REPO_NAME: gitlab.com/CMU_Sidecar/docuscope-dictionary-tools/docuscope-rules
  SAST_DISABLE_DIND: "true"

# The problem is that to be able to use go get, one needs to put
# the repository in the $GOPATH. So for example if your gitlab domain
# is gitlab.com, and that your repository is namespace/project, and
# the default GOPATH being /go, then you'd need to have your
# repository in /go/src/gitlab.com/namespace/project
# Thus, making a symbolic link corrects this.
before_script:
  - mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
  - ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
  - cd $GOPATH/src/$REPO_NAME

stages:
  - test
  - build
  - release
  - deploy

include:
  - template: Code-Quality.gitlab-ci.yml
  - template: SAST.gitlab-ci.yml

.format:
  stage: test
  script:
    - go fmt $(go list ./cmd/$COMMAND | grep -v /vendor/)
    - go vet $(go list ./cmd/$COMMAND | grep -v /vendor/)
    #- go test -race $(go list ./cmd/$COMMAND | grep -v /vendor/)

format_rules:
  extends: .format
  variables:
    COMMAND: docuscope-rules
format_neo:
  extends: .format
  variables:
    COMMAND: docuscope-rules-neo4j
format_wordclasses:
  extends: .format
  variables:
    COMMAND: docuscope-wordclasses
format_tones:
  extends: .format
  variables:
    COMMAND: docuscope-tones

.compile:
  stage: build
  script:
    - go build -o $CI_PROJECT_DIR/dist/$COMMAND ./cmd/$COMMAND
  artifacts:
    paths:
      - $CI_PROJECT_DIR/$COMMAND

compile_rules:
  extends: .compile
  variables:
    COMMAND: docuscope-rules
compile_neo:
  extends: .compile
  variables:
    COMMAND: docuscope-rules-neo4j
compile_wordclasses:
  extends: .compile
  variables:
    COMMAND: docuscope-wordclasses
compile_tones:
  extends: .compile
  variables:
    COMMAND: docuscope-tones

docker:
  stage: release
  needs:
    - job: compile_rules
      artifacts: true
    - job: compile_neo
      artifacts: true
    - job: compile_tones
      artifacts: true
    - job: compile_wordclasses
      artifacts: true
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - docker build -t "${REF_CONTAINER}" .
    - docker push "${REF_CONTAINER}"

latest:
  stage: deploy
  image: docker:latest
  rules:
    - if: '$CI_COMMIT_TAG != null'
  variables:
    REF_CONTAINER_RELEASE: ${CI_REGISTRY_IMAGE}:latest
  services:
    - docker:dind
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - docker pull "${REF_CONTAINER}"
    - docker tag "${REF_CONTAINER}" "${REF_CONTAINER_RELEASE}"
    - docker push "${REF_CONTAINER_RELEASE}"
